@using ASI.Basecode.Data.Models.CustomModels;
@model ASI.Basecode.Data.Models.CustomModels.ReportingAndAnalyticsModel;
@using Newtonsoft.Json;

@{
    string totalCategoriesJson = "none";
    string totalStatusesJson = "none";
    string totalPrioritiesJson = "none";
    string agentResolvedTicketsJson = "none";
    string agentSatisfactionJson = "none";
    string agentAvgResTime = "none";
    string categoriesJson = "none";
    string statusesJson = "none";
    string prioritiesJson = "none";


    if (User.FindFirst("UserRole")?.Value == "administrator")
    {
        totalCategoriesJson = JsonConvert.SerializeObject(Model.TicketSummaryWithCategory);
        totalStatusesJson = JsonConvert.SerializeObject(Model.TicketSummaryWithStatus);
        totalPrioritiesJson = JsonConvert.SerializeObject(Model.TicketSummaryWithPriority);
        agentResolvedTicketsJson = JsonConvert.SerializeObject(Model.TicketsResolved);
        agentAvgResTime = JsonConvert.SerializeObject(Model.AverageResolutionTime);
        agentSatisfactionJson = JsonConvert.SerializeObject(Model.CustomerSatisfactionRatings);


    }
    else if (User.FindFirst("UserRole")?.Value == "support agent")
    {
        categoriesJson = JsonConvert.SerializeObject(Model.TicketsByCategory);
        statusesJson = JsonConvert.SerializeObject(Model.TicketsByStatus);
        prioritiesJson = JsonConvert.SerializeObject(Model.TicketsByPriority);
    }


    // var userActivitiesJson = JsonConvert.SerializeObject(Model.UserActivities);
}


<div id="dateRange" class="d-flex align-items-center mb-3" style="gap: 10px;">
    <form method="get" class="d-flex align-items-center" style="gap: 10px; flex-wrap: wrap;" action="/Report/Index">
        <div style="display: flex; flex-direction: column;">
            <label for="startDate" class="form-label" style="font-weight: 600; color: #333;">Start Date</label>
            <input type="date" name="startDate" id="startDate" class="form-control" style="border-radius: 5px; border-color: #ccc; width: 200px;" value="@ViewBag.StartDate">
        </div>
        <div style="display: flex; flex-direction: column;">
            <label for="endDate" class="form-label" style="font-weight: 600; color: #333;">End Date</label>
            <input type="date" name="endDate" id="endDate" class="form-control" style="border-radius: 5px; border-color: #ccc; width: 200px;" value="@ViewBag.EndDate">
        </div>
        <button id="filterData" type="submit" class="btn btn-primary-600 radius-8 px-20 py-11" style="height: 50px; margin-top: 1.8rem">Filter Data</button>
        @if (User.FindFirst("UserRole")?.Value == "administrator")
        {
            <button id="printButton" type="button" class="btn btn-success-600 radius-8 px-20 py-11" style="height: 50px; margin-top: 1.8rem">Generate Reports</button>

        }
    </form>

</div>


<div style="width: 100%;" class="d-flex justify-content-center align-items-center">
    <strong class="text-align-center mt-3 mb-3" style="font-size: 30px;">Ticket Summary</strong>
</div>


    <div class="row row-cols-xxxl-3 row-cols-lg-3 row-cols-sm-2 row-cols-1 gy-4">
        <!-- Ticket Category Start -->
        <div class="col-md-4">
            <div class="card h-100 p-0">
                <div class="card-header border-bottom bg-base py-16 px-24">
                    <h6 class="text-lg fw-semibold mb-0">
                        Ticket Category
                        <span id="categoryTotalCount" class="badge badge-secondary ml-2">0</span> <!-- Placeholder for total count -->
                    </h6>
                </div>
                <div class="card-body p-24 text-center chart-container" style="height: 400px;">
                @if (ViewData["NoDataCategory"] != null)
                    {
                        <div id="noDataCategory" style="font-size: 18px; color: #888;">@ViewData["NoDataCategory"]</div>
                    }else{
                        <div id="pieChartCategory" style="height: 100%;"></div>
                    }
                </div>
            </div>
        </div>

        <!-- Ticket Status Start -->
        <div class="col-md-4">
            <div class="card h-100 p-0">
                <div class="card-header border-bottom bg-base py-16 px-24">
                    <h6 class="text-lg fw-semibold mb-0">
                        Ticket Status
                        <span id="statusTotalCount" class="badge badge-secondary ml-2">0</span> 
                    </h6>
                </div>
                <div class="card-body p-24 text-center chart-container" style="height: 400px;">
                @if (ViewData["NoDataStatus"] != null)
                    {
                    <div id="noDataStatus" style="font-size: 18px; color: #888;">@ViewData["NoDataStatus"]</div>
                    }else{
                        <div id="pieChartStatus" style="height: 100%;"></div>

                    }
                </div>
            </div>
        </div>

        <!-- Ticket Priority Start -->
        <div class="col-md-4">
            <div class="card h-100 p-0">
                <div class="card-header border-bottom bg-base py-16 px-24">
                    <h6 class="text-lg fw-semibold mb-0">
                        Ticket Priority
                        <span id="priorityTotalCount" class="badge badge-secondary ml-2">0</span> <!-- Placeholder for total count -->
                    </h6>
                </div>
                <div class="card-body p-24 text-center chart-container" style="height: 400px;">
                @if (ViewData["NoDataPriority"] != null)
                    {
                    <div id="noDataPriority" style="font-size: 18px; color: #888;">@ViewData["NoDataPriority"]</div>
                    }else{
                        <div id="pieChartPriority" style="height: 100%;"></div>
                    }
                </div>
            </div>
        </div>


    </div>
@if (User.FindFirst("UserRole")?.Value == "administrator")
{ 
    <!-- Agent Performance Report -->
    <div id="contentToPrint">
        <div style="width: 100%; padding-bottom: 20px;" class="d-flex justify-content-center align-items-center mt-5">
            <strong class="text-align-center" style="font-size: 30px;">Agent Performance Report</strong>
        </div>

        <div class="row row-cols-xxxl-3 row-cols-lg-3 row-cols-sm-2 row-cols-1 gy-4">
            <!-- Resolved Tickets -->
            <div class="col-md-4">
                <div class="card h-100 p-0">
                    <div class="card-header border-bottom bg-base py-16 px-24">
                        <h6 class="text-lg fw-semibold mb-0">
                            Resolved Tickets by Agents
                        </h6>
                    </div>
                    <div class="card-body p-24 text-center chart-container" style="height: 400px;">
                    
                        @if (ViewData["NoDataResolvedTickets"] != null)
                        {
                            <div id="noDataResolvedTickets" style="font-size: 18px; color: #888;">@ViewData["NoDataResolvedTickets"]</div>
                        }else{
                            <div id="pieChartResolvedTickets" style="height: 100%;"></div>
                        }

                        @* <canvas id="barChartResolvedTickets" width="400" height="200"></canvas> *@
                    </div>
                </div>
            </div>

            <!-- Average Resolution Time -->
            <div class="col-md-4">
                <div class="card h-100 p-0">
                    <div class="card-header border-bottom bg-base py-16 px-24">
                        <h6 class="text-lg fw-semibold mb-0">
                            Average Resolution Time (in hours)
                        </h6>
                    </div>
                    <div class="card-body p-24 text-center chart-container" style="height: 400px;">
                        @if (ViewData["NoDataResolutionTime"] != null)
                        {
                            <div id="noDataResolutionTime" style="font-size: 18px; color: #888;">@ViewData["NoDataResolutionTime"]</div>
                        }else{
                            <div id="pieChartResolutionTime" style="height: 100%;"></div>

                        }
                        @* <canvas id="barChartResolutionTime" width="400" height="200"></canvas> *@
                    </div>
                </div>
            </div>

            <!-- Customer Satisfaction -->
            <div class="col-md-4">
                <div class="card h-100 p-0">
                    <div class="card-header border-bottom bg-base py-16 px-24">
                        <h6 class="text-lg fw-semibold mb-0">
                            Customer Satisfaction Ratings
                        </h6>
                    </div>
                    <div class="card-body p-24 text-center chart-container" style="height: 400px;">
                        @if (ViewData["NoDataSatisfaction"] != null)
                        {
                            <div id="noDataSatisfaction" style="font-size: 18px; color: #888;">@ViewData["NoDataSatisfaction"]</div>
                        }else{
                            <div id="pieChartSatisfaction" class="w-100" style="height: 100%;"></div>
                        }
                        @* <canvas id="barChartSatisfaction" width="400" height="200"></canvas> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>


<script>
    var userRole = '@User.FindFirst("UserRole")?.Value';

    if (userRole === "administrator") {
        var totalCategories = @Html.Raw(totalCategoriesJson);
        var totalStatuses = @Html.Raw(totalStatusesJson);
        var totalPriorities = @Html.Raw(totalPrioritiesJson);
        var totalResolvedTickets = @Html.Raw(agentResolvedTicketsJson);
        var avgResolutionTime = @Html.Raw(agentAvgResTime);
        var avgCustSatRating = @Html.Raw(agentSatisfactionJson);

    }
    else if (userRole === "support agent") {
        var categories = @Html.Raw(categoriesJson);
        var statuses = @Html.Raw(statusesJson);
        var priorities = @Html.Raw(prioritiesJson);
    }

    function renderChart(elementId, seriesData, labels) {
        var options = {
            series: seriesData,
            chart: {
                type: 'pie',
                height: 300,
            },
            labels: labels,
            legend: {
                position: 'right',
                horizontalAlign: 'left',
                verticalAlign: 'right',
                itemMargin: { horizontal: 5, vertical: 5 },
                layout: 'vertical',
                formatter: function (seriesName, opts) {
                    return seriesName + ' (' + opts.w.globals.series[opts.seriesIndex] + ')';
                },
                markers: {
                    width: 10,
                    height: 12,
                    radius: 12
                },
            },
            colors: ['#487FFF', '#FF9F29', '#45B369', '#EF4A00', '#F5C26B'],
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: { width: 200 },
                    legend: { show: false }
                }
            }]
        };


        var id = elementId;
        var chart = new ApexCharts(document.getElementById(id), options);
        chart.render();
    }

    document.addEventListener('DOMContentLoaded', function () {
        if (userRole === "administrator" ) {
            renderChart('pieChartCategory', totalCategories.map(c => c.TotalCount), totalCategories.map(c => c.CategoryName));
            renderChart('pieChartStatus', totalStatuses.map(s => s.TotalCount), totalStatuses.map(s => s.StatusName));
            renderChart('pieChartPriority', totalPriorities.map(p => p.TotalCount), totalPriorities.map(p => p.PriorityName));

            renderChart('pieChartResolvedTickets', totalResolvedTickets.map(t => t.TotalResolvedCount), totalResolvedTickets.map(t => t.AgentName));
            renderChart('pieChartResolutionTime', avgResolutionTime.map(rt => rt.AvgResolutionTime), avgResolutionTime.map(rt => rt.AgentName));
            renderChart('pieChartSatisfaction', avgCustSatRating.map(cs => cs.AvgFeedbackRating), avgCustSatRating.map(cs => cs.AgentName));
        } else if (userRole === "support agent") {
            renderChart('pieChartCategory', categories.map(c => c.TicketsByCategory), categories.map(c => c.CategoryName));
            renderChart('pieChartStatus', statuses.map(s => s.TicketByStatus), statuses.map(s => s.StatusName));
            renderChart('pieChartPriority', priorities.map(p => p.TicketByPriority), priorities.map(p => p.PriorityName));
        }
    });

</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var noDataResolvedTickets = '@ViewData["NoDataResolvedTickets"]';
        var noDataResolutionTime = '@ViewData["NoDataResolutionTime"]';
        var noDataSatisfaction = '@ViewData["NoDataSatisfaction"]';

        function checkDataAvailability() {
            var printButton = document.getElementById('printButton');

            if (
                noDataResolvedTickets.trim() !== '' &&
                noDataResolutionTime.trim() !== '' &&
                noDataSatisfaction.trim() !== ''
            ) {
                printButton.disabled = true;
            } else {
                printButton.disabled = false;
            }
        }

        checkDataAvailability();

        document.getElementById("printButton").addEventListener("click", async function () {
            const { jsPDF } = window.jspdf;

            const doc = new jsPDF();

            doc.setFont("Helvetica", "bold");
            doc.setFontSize(18);
            doc.text("Agent Performance Report", 105, 15, { align: "center" });

            const startDate = document.getElementById("startDate").value;
            const endDate = document.getElementById("endDate").value;

            if (startDate && endDate) {
                const dateRangeText = `Date Range: ${startDate} - ${endDate}`;
                doc.setFontSize(12);
                doc.text(dateRangeText, 105, 25, { align: "center" });
            }

            let firstChart = document.getElementById("pieChartResolvedTickets");
            if (firstChart) {
                const canvas = await html2canvas(firstChart);
                const imgData = canvas.toDataURL("image/png");
                doc.addImage(imgData, "PNG", 10, 30, 190, 110);
                doc.text("Resolved Tickets by Agents", 105, 140, { align: "center" });
            }

            doc.addPage();

            let secondChart = document.getElementById("pieChartResolutionTime");
            if (secondChart) {
                const canvas = await html2canvas(secondChart);
                const imgData = canvas.toDataURL("image/png");
                doc.addImage(imgData, "PNG", 10, 30, 190, 110); 
                doc.text("Average Resolution Time (in hours)", 105, 130, { align: "center" });
            }

            let thirdChart = document.getElementById("pieChartSatisfaction");
            if (thirdChart) {
                const canvas = await html2canvas(thirdChart);
                const imgData = canvas.toDataURL("image/png");
                doc.addImage(imgData, "PNG", 10, 150, 190, 110);
                doc.text("Customer Satisfaction Ratings", 105, 250, { align: "center" });
            }

            doc.save("Agent_Performance_Report.pdf");
        });
    });


</script>


<script>
    document.addEventListener('DOMContentLoaded', function () {

        var today = new Date().toISOString().split('T')[0];  

        document.getElementById("startDate").setAttribute("max", today);
        document.getElementById("endDate").setAttribute("max", today);

        document.querySelector("form").addEventListener("submit", function (e) {
            var startDate = document.getElementById("startDate").value;
            var endDate = document.getElementById("endDate").value;
            var printButton = document.getElementById('printButton');

            if (new Date(endDate) > new Date()) {
                alert("End date should not exceed today.");
                e.preventDefault();  
            } else if(new Date(startDate) > new Date(endDate)){
                alert("Start date should not be beyond the end date.");
                printButton.disabled = true;
                e.preventDefault();
            } 
        });
    });


</script>