@using ASI.Basecode.Data.Models
@using ASI.Basecode.Data;
@using ASI.Basecode.Resources.Constants;
@using ASI.Basecode.WebApp.Repository
@using static ASI.Basecode.Resources.Constants.Enums;
@using System.Security.Claims;
@model List<Notification>

@{
    ViewData["Title"] = "Notifications";

    var optionVal = TempData["hasRead"] as byte?;
}

<h6 class="">Notification</h6>


@{
    // var totalCountUnRead = Model.Count(m => m.IsRead == 0 || m.IsRead == null);
    // NotificationManager _notifManager = new NotificationManager();
    // var userId = int.Parse(User.FindFirstValue("UserId"));
    // var totalCountUnRead = _notifManager.GetUserAssociatedNotif(userId).Where(m => m.IsRead == (byte)NotifStatus.HasRead).ToList().Count;
    var totalCountUnRead  = TempData["totalCountNotRead"] as int?;
}
<div class="mt-40 mb-20 d-flex justify-content-between align-items-center" id="filterContainer" style="opacity:1">
    @if (Model.Count > 0 && totalCountUnRead > 0)
    {
        <form method="post" action="@Url.Action("MarkAllAsRead","Notification")">
            <input type="hidden" value="@((byte)Enums.NotifStatus.HasRead)" name="value" />
            <button type="submit" class="btn btn-success-600 radius-8 px-20 py-11 d-flex align-items-center gap-2">
                Mark all as read
                <iconify-icon icon="mingcute:check-line" class="text-xl"></iconify-icon>
            </button>
        </form>
    }
    else
    {
        <button type="button" class="btn btn-success-600 radius-8 px-20 py-11 d-flex align-items-center gap-2" disabled>
            Mark all as read
            <iconify-icon icon="mingcute:check-line" class="text-xl"></iconify-icon>
        </button>
    }

    @if (Model.Count >= 0)
    {
        <div class="d-flex align-items-center gap-2">
            <span>Filter by:</span>
            <select id="filterNotif" class="form-control radius-8 form-select form-select-lg w-auto ps-20 py-7 radius-8 h-50-px">
                <option class="form-control radius-8" value="" selected>Choose...</option>
                <option class="form-control radius-8" value="@((byte)Enums.NotifStatus.NotRead)">Unread</option>
                <option class="form-control radius-8" value="@((byte)Enums.NotifStatus.HasRead)">Read</option>
                <option class="form-control radius-8" value="@((byte)Enums.NotifStatus.All)">All</option>
            </select>
        </div>
    }

</div>

<form id="FrmfilterNotif" method="post" action="@Url.Action("NotifStatusFilter","Notification")">
    <input type="hidden" id="optionHolder" name="option" />
</form>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const filterNotif = document.getElementById('filterNotif');
        const optionHolder = document.getElementById('optionHolder');
        const frmFilterNotif = document.getElementById('FrmfilterNotif');

        filterNotif.addEventListener('change', function (event) {
            event.preventDefault();

            const optionType = filterNotif.value;

            if (optionType !== "") {
                optionHolder.value = optionType;
                frmFilterNotif.submit();
            } else {
                console.log('Please select a valid filter option.');
            }
        });
    });
</script>


@if (Model.Count > 0)
{
    foreach (var notif in Model)
    {
        if (notif.IsRead == (byte)Enums.NotifStatus.NotRead || notif.IsRead == null)
        {
            <div class="alert alert-primary bg-primary-50 text-primary-600 border-primary-600 border-start-width-4-px border-top-0 border-end-0 border-bottom-0 px-24 py-13 mb-3 fw-semibold text-lg radius-4" role="alert">
                <div class="d-flex flex-column gap-2">
                    <div class="d-flex align-items-center gap-2">
                        <span>
                            @notif.Content

                            @{
                                int? ticketId = 0;
                                using (var db = new AssisthubDBContext())
                                {
                                    ticketId = db.UserTickets.Where(m => m.UserTicketId == notif.UserTicketId).FirstOrDefault().TicketId;
                                }
                                if (ticketId != null)
                                {
                                    if (User.IsInRole("user"))
                                    {
                                        <a href="@Url.Action("Details","UserTicket", new { id = ticketId, NotificationId = notif.NotificationId} )" class="text-decoration-underline">View ticket here</a>
                                    }
                                    else if (User.IsInRole("support agent"))
                                    {
                                        <a href="@Url.Action("Edit","AgentManageTicket", new { id = ticketId, NotificationId = notif.NotificationId} )" class="text-decoration-underline">View ticket here</a>
                                    }
                                }
                            }

                        </span>
                    </div>
                    <small class="text-muted text-primary-600">
                        @notif.CreatedAt
                    </small>
                    <small class="text-muted text-primary-600">
                        <span>Unread</span>
                    </small>
                </div>
            </div>
        }
        else
        {

            <div class="mb-10 alert alert-success bg-success-100 text-success-600 border-success-600 border-start-width-4-px border-top-0 border-end-0 border-bottom-0 px-24 py-13 mb-0 fw-semibold text-lg radius-4 d-flex align-items-center justify-content-between" role="alert">
                @*             <div class="alert alert-primary bg-primary-50 text-primary-600 border-primary-600 border-start-width-4-px border-top-0 border-end-0 border-bottom-0 px-24 py-13 mb-3 fw-semibold text-lg radius-4" role="alert">
 *@                <div class="d-flex flex-column gap-2">
                    <div class="d-flex align-items-center gap-2">
                        <span>
                            @notif.Content
                            @if (User.IsInRole("support agent"))
                            {
                                int? ticketId = 0;
                                using (var db = new AssisthubDBContext())
                                {
                                    ticketId = db.UserTickets.Where(m => m.UserTicketId == notif.UserTicketId).FirstOrDefault().TicketId;
                                }
                                if (ticketId != null)
                                {
                                    <a href="@Url.Action("Edit","AgentManageTicket", new { id = ticketId } )" class="text-decoration-underline">View ticket here</a>
                                }
                            }
                        </span>
                    </div>
                    <small class="text-muted text-success-600">
                        @notif.CreatedAt
                    </small>
                    <small class="text-muted text-success-600">
                        <span>Read</span>
                        <span>
                            <iconify-icon icon="mingcute:check-line" class="text-xl"></iconify-icon>
                        </span>
                    </small>
                </div>
            </div>
        }

    }

}
else
{
    <p>You have no new notification as of the moment</p>
}


