@using ASI.Basecode.Data.Models;
@model IEnumerable<VwFeedbackView>;

@{
    int userRoleId = ViewData["UserRoleId"] != null ? (int)ViewData["UserRoleId"] : 0;
    var averageRating = ViewData["AverageRating"] != null ? (decimal)ViewData["AverageRating"] : 0;
    var feedbackCount = ViewData["FeedbackCount"] != null ? (int)ViewData["FeedbackCount"] : 0;
    var agentName = ViewData["AgentName"] != null ? (string)ViewData["AgentName"] : "";
    var categories = Model.Select(m => m.TicketCategory).Distinct().ToList();
}
<div class="d-flex justify-content-between align-items-center mb-3">
    @switch (userRoleId)
    {
        case 1:
            <h6>My Feedbacks</h6>
            break;
        case 2:
            <h6 class="fw-bold">Feedbacks to <i>You</i></h6>
            break;
        case 3:
            <h6 class="fw-bold">Feedbacks to <i>Agent @agentName</i></h6>
            break;
        default:
            <h6>Feedbacks</h6>
            break;
    }
</div>

<div class="card h-100 p-16 radius-12">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <!-- VIEW TYPE BUTTONS -->
        <div class="btn-group align-items-center" role="group" aria-label="View Toggle">
            <button id="cardViewBtn" class="btn btn-outline-primary active" onclick="switchView('card')">
                <i class="bi bi-card-list"></i>
            </button>
            <button id="tableViewBtn" class="btn btn-outline-primary" onclick="switchView('table')">
                <i class="bi bi-table"></i>
            </button>
        </div>
        <!-- LEGENDS -->
        <div class="d-flex gap-3" id="cardLegends" style="display: flex;">
            <span class="fw-semibold mb-0" id="legendsTitle">Ticket Status Legend</span>
            <div class="d-flex align-items-center" id="legendsResolved">
                <div class="status-legend" id="legendsResolvedColor" style="background-color: #28a745; width: 16px; height: 16px; border-radius: 50%;"></div>
                <span class="ms-2" id="legendsResolvedLabel">Resolved</span>
            </div>
            <div class="d-flex align-items-center" id="legendsClosed">
                <div class="status-legend" id="legendsClosedColor" style="background-color: #6c757d; width: 16px; height: 16px; border-radius: 50%;"></div>
                <span class="ms-2"id="legendsClosedLabel">Closed</span>
            </div>
        </div>
        <div>
            <div id="createFeedbackBtn" style="display: flex;">
                <a asp-controller="Feedback" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle" id="createFeedbackBtnIcon"></i> Create Feedback
                </a>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <input id="searchBar" class="form-control me-2" type="text" placeholder="Search Feedback..." style="width: 300px;" />

        <!-- Filters -->
        <div class="d-flex gap-2" style="margin-left: auto;">
            <select id="filterCategory" class="form-select me-2" style="width: 200px;">
                <option value="">All Categories</option>
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>

            <select id="filterRating" class="form-select me-2" style="width: 150px;">
                <option value="">All Ratings</option>
                @for (int i = 1; i <= 5; i++)
                {
                    <option value="@($"{i}.00")">@i Star(s)</option>
                }
            </select>

            <select id="filterStatus" class="form-select me-2" style="width: 150px;">
                <option value="">All Statuses</option>
                <option value="3">Resolved</option>
                <option value="4">Closed</option>
            </select>
        </div>
    </div>
    @if (userRoleId == 2)
    {
        <div class="d-flex justify-content-around align-items-center mb-4 bg-light p-3 rounded">
            <div class="text-center">
                <span><b>Your Feedback Rating</b></span>
            </div>

            <div class="text-center">
                <strong>Average Rating:</strong>
                @{
                    int fullStars = (int)averageRating;
                    bool hasHalfStar = ((double)averageRating - fullStars) >= 0.5;
                }
                <span class="ms-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= fullStars)
                        {
                            <i class="bi bi-star-fill text-warning"></i>
                        }
                        else if (hasHalfStar && i == fullStars + 1)
                        {
                            <i class="bi bi-star-half text-warning"></i>
                        }
                        else
                        {
                            <i class="bi bi-star text-secondary"></i>
                        }
                    }
                    <span> (@averageRating.ToString("0.0"))</span>
                </span>
            </div>
            <div class="text-center">
                <strong>Total Feedbacks:</strong> @feedbackCount
            </div>
        </div>
    }

    <div id="deleteConfirmationModal" class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this feedback?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>


    <div id="cardView" class="row">
        @if(Model.Any())
        {
            @foreach (var feedback in Model)
            {
                var borderColor = feedback.StatusId == 3 ? "#28a745" : feedback.StatusId == 4 ? "#6c757d" : "#ccc";
                var headerColor = feedback.StatusId == 3 ? "#28a745" : feedback.StatusId == 4 ? "#6c757d" : "#f8f9fa";
                <div class="col-md-4 mb-3 feedback-card"
                     data-category="@feedback.TicketCategory"
                     data-rating="@feedback.FeedbackRating?.ToString("0.00")"
                     data-status="@feedback.StatusId"
                     data-search="@feedback.IssueDescription @feedback.FeedbackText">
                    <div class="card text-white" style="border: 2px solid @borderColor;">
                        <div class="card-header text-white" style="background-color: @headerColor;">
                            Feedback ID: @feedback.FeedbackId
                        </div>
                        <div class="card-body">
                            <p><strong>Category:</strong> @feedback.TicketCategory</p>
                            <p><strong>Description:</strong> @feedback.IssueDescription</p>
                            <p><strong>Feedback:</strong> @feedback.FeedbackText</p>
                            <p>
                                <strong>Rating:</strong>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="bi @(
                                    i <= feedback.FeedbackRating ?
                                    "bi-star-fill text-warning" :
                                    "bi-star text-secondary"
                                )"></i>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <span>No Feedbacks Found!</span>
            </div>
        }
    </div>

    <div id="tableView" style="display: none;">
        <div class="table-responsive-scroll">
            <table class="table bordered-table">
                <thead>
                    <tr>
                        @if (userRoleId == 3)
                        {
                            <th>Feedback ID</th>
                        }
                        <th>Ticket ID</th>
                        <th>Category</th>
                        <th>Issue Description</th>
                        <th>Status</th>
                        <th>Feedback</th>
                        @if (userRoleId == 3)
                        {
                            <th>Agent ID</th>
                        }
                        <th>Rating</th>
                        <th>Date Created</th>
                        @if (userRoleId == 1 || userRoleId == 3)
                        {
                            <th>Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Any())
                    {
                        @foreach (var feedback in Model)
                        {
                            <tr class="feedback-row" id="feedback-@feedback.FeedbackId"
                                data-category="@feedback.TicketCategory"
                                data-rating="@feedback.FeedbackRating?.ToString("0.00")"
                                data-status="@feedback.StatusId"
                                data-search="@feedback.IssueDescription @feedback.FeedbackText">
                                @if (userRoleId == 3)
                                {
                                    <td>@feedback.FeedbackId</td>
                                }
                                <td>@feedback.UserTicketId</td>
                                <td>@feedback.TicketCategory</td>
                                <td>@feedback.IssueDescription</td>
                                <td>
                                    @{
                                        string statusText = feedback.StatusId == 3 ? "Resolved" :
                                        feedback.StatusId == 4 ? "Closed" : "In Progress";
                                    }
                                    <span>@statusText</span>
                                </td>
                                <td>@feedback.FeedbackText</td>
                                @if (userRoleId == 3)
                                {
                                    <td>@feedback.AgentId</td>
                                }
                                <td>
                                    <span>
                                        @{
                                            int fullStars = (int)feedback.FeedbackRating;
                                            bool hasHalfStar = ((double)feedback.FeedbackRating - fullStars) >= 0.5;
                                        }
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= fullStars)
                                            {
                                                <i class="bi bi-star-fill text-warning"></i>
                                            }
                                            else if (hasHalfStar && i == fullStars + 1)
                                            {
                                                <i class="bi bi-star-half text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-star text-secondary"></i>
                                            }
                                        }
                                        <span>(@feedback.FeedbackRating.ToString())</span>
                                    </span>
                                </td>
                                <td>@feedback.CreatedAt?.ToString("MM/dd/yyyy")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No feedback available</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    if (@userRoleId == 2 || @userRoleId == 3) {
        document.getElementById("createFeedbackBtn").style.display = "none";
        document.getElementById("createFeedbackBtnIcon").style.display = "none";
    }
    document.addEventListener('DOMContentLoaded', () => {
        const searchBar = document.getElementById('searchBar');
        const filterCategory = document.getElementById('filterCategory');
        const filterRating = document.getElementById('filterRating');
        const filterStatus = document.getElementById('filterStatus');
        const feedbackCards = document.querySelectorAll('.feedback-card');
        const feedbackRows = document.querySelectorAll('.feedback-row');
        const cardViewBtn = document.getElementById('cardViewBtn');
        const tableViewBtn = document.getElementById('tableViewBtn');
        const cardView = document.getElementById('cardView');
        const tableView = document.getElementById('tableView');

        // Card View Logic
        cardViewBtn.addEventListener('click', () => {
            cardView.style.display = 'flex';
            tableView.style.display = 'none';
            cardViewBtn.classList.add('btn-primary');
            cardViewBtn.classList.remove('btn-outline-primary');
            tableViewBtn.classList.add('btn-outline-primary');
            tableViewBtn.classList.remove('btn-primary');
            document.getElementById("cardLegends").style.display = "flex";
            document.getElementById("legendsTitle").style.display = "flex";
            document.getElementById("legendsResolvedColor").style.display = "flex";
            document.getElementById("legendsResolvedLabel").style.display = "flex";
            document.getElementById("legendsClosed").style.display = "flex";
            document.getElementById("legendsClosedColor").style.display = "flex";
            document.getElementById("legendsClosedLabel").style.display = "flex";
        });

        // Table View Logic
        tableViewBtn.addEventListener('click', () => {
            tableView.style.display = 'block';
            cardView.style.display = 'none';
            tableViewBtn.classList.add('btn-primary');
            tableViewBtn.classList.remove('btn-outline-primary');
            cardViewBtn.classList.add('btn-outline-primary');
            cardViewBtn.classList.remove('btn-primary');
            cardViewBtn.classList.remove('active');
            document.getElementById("cardLegends").style.display = "none";
            document.getElementById("legendsTitle").style.display = "none";
            document.getElementById("legendsResolved").style.display = "none";
            document.getElementById("legendsResolvedColor").style.display = "none";
            document.getElementById("legendsResolvedLabel").style.display = "none";
            document.getElementById("legendsClosed").style.display = "none";
            document.getElementById("legendsClosedColor").style.display = "none";
            document.getElementById("legendsClosedLabel").style.display = "none";
        });

        // Apply Filters
        const applyFilters = () => {
            const searchQuery = searchBar.value.toLowerCase();
            const categoryFilter = filterCategory.value;
            const ratingFilter = filterRating.value;
            const statusFilter = filterStatus.value;

            const filterFeedback = (elements) => {
                elements.forEach(el => {
                    const matchesSearch = el.dataset.search.toLowerCase().includes(searchQuery);
                    const matchesCategory = !categoryFilter || el.dataset.category === categoryFilter;
                    const matchesRating = !ratingFilter || el.dataset.rating === ratingFilter;
                    const matchesStatus = !statusFilter || el.dataset.status === statusFilter;

                    el.style.display = (matchesSearch && matchesCategory && matchesRating && matchesStatus) ? '' : 'none';
                });
            };

            filterFeedback(feedbackCards);
            filterFeedback(feedbackRows);
        };

        searchBar.addEventListener('input', applyFilters);
        filterCategory.addEventListener('change', applyFilters);
        filterRating.addEventListener('change', applyFilters);
        filterStatus.addEventListener('change', applyFilters);
    });
    let selectedFeedbackId = null;

    function showDeleteModal(feedbackId) {
        selectedFeedbackId = feedbackId;
        const modal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
        modal.show();
    }

    document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
        if (!selectedFeedbackId) return;

        fetch(`/Feedback/Delete/${selectedFeedbackId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, "success");
                    window.location.reload();
                } else {
                    showToast(data.message || "An error occurred while deleting feedback.", "danger");
                    window.location.reload();
                }
            })
            .catch(error => {
                console.error("Error during delete:", error);
                showToast("An unexpected error occurred.", "danger");
            })
            .finally(() => {
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmationModal'));
                window.location.reload();
                modal.hide();
            });
    });

    function showToast(message, type = "success") {
        const toastId = `toast-${Date.now()}`;
        const toastHtml = `
                <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;

        const container = document.getElementById('toastContainer');
        container.insertAdjacentHTML('beforeend', toastHtml);

        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toast.show();

        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });
    }
    function onFeedbackCreated() {
        showToast("Feedback created successfully!", "success");
    }
</script>
<style>
    .bg-light {
        background-color: #f8f9fa !important;
        display: flex;
        gap: 20px;
    }

    .table-responsive-scroll {
        max-height: 400px;
        overflow-y: auto;
        overflow-x: auto;
    }

    .bordered-table {
        width: 100%;
        border-collapse: collapse;
    }

        .bordered-table th, .bordered-table td {
            padding: 12px 15px;
            border: 1px solid #dee2e6;
        }

        .bordered-table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }

    .bi-star, .bi-star-fill, .bi-star-half {
        font-size: 1.1rem;
    }

    .text-warning {
        color: #ffc107 !important;
    }

    .text-secondary {
        color: #6c757d !important;

    }

    .modal .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .toast-container {
        top: 20px;
        right: 20px;
        position: fixed;
        z-index: 1050;
    }

    .toast {
        min-width: 300px;
        animation: fadeInOut 0.5s ease;
    }

    @@keyframes fadeInOut {
        0% { opacity: 0; transform: translateY(-20px); }
        100% { opacity: 1; transform: translateY(0); }
    }
</style>